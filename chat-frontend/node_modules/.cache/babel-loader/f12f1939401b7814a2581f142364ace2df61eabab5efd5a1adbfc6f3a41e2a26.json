{"ast":null,"code":"var _jsxFileName = \"/Users/enderpeyzner/Downloads/CompSci/DUHackathon/chat-frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the AuthContext with default null\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// AuthProvider will wrap the app and manage auth state\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n\n  // On mount, check if user is already authenticated\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch('/api/check-auth', {\n          credentials: 'include'\n        });\n        if (res.ok) {\n          const data = await res.json();\n          setUsername(data.username || '');\n        }\n      } catch (err) {\n        console.error('Auth check failed', err);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // call this on successful login\n  const login = name => {\n    setUsername(name);\n    localStorage.setItem('username', name);\n  };\n\n  // call this on logout\n  const logout = () => {\n    setUsername('');\n    localStorage.removeItem('username');\n    fetch('/api/logout', {\n      credentials: 'include'\n    }).catch(console.error);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      username,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n// custom hook to use auth context\n_s(AuthProvider, \"vvPqiwmcocEAjsjiwnE6bJ+J4Yk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","username","setUsername","checkAuth","res","fetch","credentials","ok","data","json","err","console","error","login","name","localStorage","setItem","logout","removeItem","catch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/enderpeyzner/Downloads/CompSci/DUHackathon/chat-frontend/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create the AuthContext with default null\nconst AuthContext = createContext(null);\n\n// AuthProvider will wrap the app and manage auth state\nexport const AuthProvider = ({ children }) => {\n  const [username, setUsername] = useState('');\n\n  // On mount, check if user is already authenticated\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        const res = await fetch('/api/check-auth', {\n          credentials: 'include'\n        });\n        if (res.ok) {\n          const data = await res.json();\n          setUsername(data.username || '');\n        }\n      } catch (err) {\n        console.error('Auth check failed', err);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // call this on successful login\n  const login = (name) => {\n    setUsername(name);\n    localStorage.setItem('username', name);\n  };\n\n  // call this on logout\n  const logout = () => {\n    setUsername('');\n    localStorage.removeItem('username');\n    fetch('/api/logout', { credentials: 'include' }).catch(console.error);\n  };\n\n  return (\n    <AuthContext.Provider value={{ username, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === null) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;UACzCC,WAAW,EAAE;QACf,CAAC,CAAC;QACF,IAAIF,GAAG,CAACG,EAAE,EAAE;UACV,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;UAC7BP,WAAW,CAACM,IAAI,CAACP,QAAQ,IAAI,EAAE,CAAC;QAClC;MACF,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAAC;MACzC;IACF,CAAC;IACDP,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMU,KAAK,GAAIC,IAAI,IAAK;IACtBZ,WAAW,CAACY,IAAI,CAAC;IACjBC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,IAAI,CAAC;EACxC,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACnBf,WAAW,CAAC,EAAE,CAAC;IACfa,YAAY,CAACG,UAAU,CAAC,UAAU,CAAC;IACnCb,KAAK,CAAC,aAAa,EAAE;MAAEC,WAAW,EAAE;IAAU,CAAC,CAAC,CAACa,KAAK,CAACR,OAAO,CAACC,KAAK,CAAC;EACvE,CAAC;EAED,oBACEhB,OAAA,CAACC,WAAW,CAACuB,QAAQ;IAACC,KAAK,EAAE;MAAEpB,QAAQ;MAAEY,KAAK;MAAEI;IAAO,CAAE;IAAAlB,QAAA,EACtDA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAzB,EAAA,CAzCaF,YAAY;AAAA4B,EAAA,GAAZ5B,YAAY;AA0CzB,OAAO,MAAM6B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGrC,UAAU,CAACK,WAAW,CAAC;EACvC,IAAIgC,OAAO,KAAK,IAAI,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}