{"ast":null,"code":"var _jsxFileName = \"/Users/enderpeyzner/Downloads/CompSci/Chat/chat-frontend/src/ChatRoom.js\",\n  _s = $RefreshSig$();\n// ChatRoom.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatRoom = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [user, setUser] = useState('');\n  const [message, setMessage] = useState('');\n  const fetchMessages = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/messages');\n      const data = await response.json();\n      setMessages(data);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    }\n  };\n  const sendMessage = async () => {\n    try {\n      await fetch('http://localhost:8080/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          user,\n          message\n        })\n      });\n\n      // Clear the message input after sending\n      setMessage('');\n      // Fetch messages to update the list\n      fetchMessages();\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const clearMessages = async () => {\n    if (!window.confirm(\"Are you sure you want to clear the chat?\")) return;\n    try {\n      const response = await fetch(\"http://localhost:5000/messages\", {\n        method: \"DELETE\"\n      });\n      if (!response.ok) throw new Error(\"Failed to clear chat\");\n      alert(\"Chat cleared!\");\n      // Optionally, refresh messages after clearing\n      fetchMessages(); // Your existing function to reload messages\n    } catch (error) {\n      console.error(\"Clear chat error:\", error);\n      alert(\"Could not clear chat. Try again.\");\n    }\n  };\n  useEffect(() => {\n    // Fetch messages on component mount\n    fetchMessages();\n    // Poll for new messages every 2 seconds\n    const interval = setInterval(() => {\n      fetchMessages();\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []); // Run only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [message.user, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this), \" \", message.message]\n      }, message._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Your name\",\n        value: user,\n        onChange: e => setUser(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearMessages,\n        className: \"clear-chat-btn\",\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 3\n  }, this);\n};\n_s(ChatRoom, \"vgIXI70xT3U40yO1Naxws4REG+Q=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ChatRoom","_s","messages","setMessages","user","setUser","message","setMessage","fetchMessages","response","fetch","data","json","error","console","sendMessage","method","headers","credentials","body","JSON","stringify","clearMessages","window","confirm","ok","Error","alert","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_id","type","placeholder","value","onChange","e","target","onClick","className","_c","$RefreshReg$"],"sources":["/Users/enderpeyzner/Downloads/CompSci/Chat/chat-frontend/src/ChatRoom.js"],"sourcesContent":["// ChatRoom.js\n\nimport React, { useState, useEffect } from 'react';\n\nconst ChatRoom = () => {\n\tconst [messages, setMessages] = useState([]);\n\tconst [user, setUser] = useState('');\n\tconst [message, setMessage] = useState('');\n\n\tconst fetchMessages = async () => {\n\t\ttry {\n\t\t\tconst response = await fetch('http://localhost:8080/messages');\n\t\t\tconst data = await response.json();\n\t\t\tsetMessages(data);\n\t\t} catch (error) {\n\t\t\tconsole.error('Error fetching messages:', error);\n\t\t}\n\t};\n\n\tconst sendMessage = async () => {\n\t\ttry {\n\t\t\tawait fetch('http://localhost:8080/messages', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t},\n\t\t\t\tcredentials: \"include\",\n\t\t\t\tbody: JSON.stringify({ user, message }),\n\t\t\t});\n\n\t\t\t// Clear the message input after sending\n\t\t\tsetMessage('');\n\t\t\t// Fetch messages to update the list\n\t\t\tfetchMessages();\n\t\t} catch (error) {\n\t\t\tconsole.error('Error sending message:', error);\n\t\t}\n\t};\n\n\tconst clearMessages = async () => {\n\t\tif (!window.confirm(\"Are you sure you want to clear the chat?\")) return;\n\n\t\ttry {\n\t\t\tconst response = await fetch(\"http://localhost:5000/messages\", {\n\t\t\tmethod: \"DELETE\",\n\t\t\t});\n\t\t\t\n\t\t\tif (!response.ok) throw new Error(\"Failed to clear chat\");\n\t\t\t\n\t\t\talert(\"Chat cleared!\");\n\t\t\t// Optionally, refresh messages after clearing\n\t\t\tfetchMessages(); // Your existing function to reload messages\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Clear chat error:\", error);\n\t\t\talert(\"Could not clear chat. Try again.\");\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\t// Fetch messages on component mount\n\t\tfetchMessages();\n\t\t// Poll for new messages every 2 seconds\n\t\tconst interval = setInterval(() => {\n\t\t\tfetchMessages();\n\t\t}, 2000);\n\n\t\treturn () => clearInterval(interval);\n\t}, []); // Run only once on mount\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Chat Room</h2>\n\t\t\t<ul>\n\t\t\t\t{messages.map((message) => (\n\t\t\t\t\t<li key={message._id}>\n\t\t\t\t\t\t<strong>{message.user}:</strong> {message.message}\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Your name\"\n\t\t\t\t\tvalue={user}\n\t\t\t\t\tonChange={(e) => setUser(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Type your message...\"\n\t\t\t\t\tvalue={message}\n\t\t\t\t\tonChange={(e) => setMessage(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<button onClick={sendMessage}>Send</button>\n\t\t\t\t<button onClick={clearMessages} className=\"clear-chat-btn\">Clear</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ChatRoom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}